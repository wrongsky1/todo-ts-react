{"version":3,"sources":["components/TodoItem.tsx","components/TodoList.tsx","components/App.tsx","index.tsx"],"names":["TodoItem","props","id","title","complete","removeTodo","toggleTodo","type","checked","onChange","style","display","margin","onClick","background","border","outline","color","TodoList","items","map","todo","App","useState","value","setValue","todos","setTodos","inputRef","useRef","addTodo","Date","now","useEffect","current","focus","e","target","onKeyDown","key","ref","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAOMA,EAAgC,SAACC,GAAW,IACvCC,EAA+CD,EAA/CC,GAAIC,EAA2CF,EAA3CE,MAAOC,EAAoCH,EAApCG,SAAUC,EAA0BJ,EAA1BI,WAAYC,EAAcL,EAAdK,WAExC,OAAO,gCACH,uBAAOC,KAAK,WAAWC,QAASJ,EAAUK,SAAU,kBAAMH,EAAWJ,MACrE,sBAAMQ,MAAO,CAACC,QAAS,eAAgBC,OAAQ,UAA/C,SACKT,IAEL,wBACIU,QAAS,kBAAMR,EAAWH,IAC1BQ,MAAO,CACHI,WAAY,cACZC,OAAQ,OACRC,QAAS,OACTC,MAAO,OANf,mBCNFC,EAAqC,SAACjB,GACEA,EAAlCkB,MAD2C,IACpCb,EAA2BL,EAA3BK,WAAYD,EAAeJ,EAAfI,WAE3B,OAAO,8BAECJ,EAAMkB,MAAMC,KAAI,SAAAC,GAAI,OAChB,cAAC,EAAD,aAEIf,WAAYA,EACZD,WAAYA,GACRgB,GAHCA,EAAKnB,UCZxBoB,EAAgB,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEEF,mBAAkB,IAFpB,mBAEjBG,EAFiB,KAEVC,EAFU,KAIlBC,EAAWC,iBAAyB,MASpCC,EAAU,WACRN,IACAG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAChBxB,GAAI6B,KAAKC,MACT7B,MAAOqB,EACPpB,UAAU,MAEdqB,EAAS,MAuBjB,OAJAQ,qBAAU,WACFL,EAASM,SAASN,EAASM,QAAQC,UACxC,IAEI,gCACH,gCACI,uBAAOX,MAASA,EAAOf,SAvCkC,SAAC2B,GAC9DX,EAASW,EAAEC,OAAOb,QAsCmCc,UAnCW,SAACF,GACnD,UAAVA,EAAEG,KAAiBT,KAkCwDU,IAAKZ,IAChF,wBAAQf,QAAWiB,EAAnB,oBAEJ,cAAC,EAAD,CAAUX,MAAOO,EAAOrB,WAxBT,SAACH,GAChByB,EAASD,EAAMe,QAAO,SAAApB,GAAI,OAAIA,EAAKnB,KAAOA,OAuBMI,WApBjC,SAACJ,GAChByB,EAASD,EAAMN,KAAI,SAAAC,GACf,OAAGA,EAAKnB,KAAOA,EAAWmB,EACnB,2BACAA,GADP,IAEIjB,UAAWiB,EAAKjB,sBChChCsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.65763898.chunk.js","sourcesContent":["import {ITodo} from '../types/data'\n\ninterface ITodoItem extends ITodo {\n    removeTodo: (id: number) => void;\n    toggleTodo: (id: number) => void;\n}\n\nconst TodoItem: React.FC<ITodoItem> = (props) => {\n    const {id, title, complete, removeTodo, toggleTodo} = props;\n\n    return <div>\n        <input type='checkbox' checked={complete} onChange={() => toggleTodo(id)}/>\n        <span style={{display: 'inline-block', margin: '0 10px'}}>\n            {title}\n        </span>\n        <button \n            onClick={() => removeTodo(id)}\n            style={{\n                background: 'transparent',\n                border: 'none',\n                outline: 'none',\n                color: 'red'\n            }}\n        >x</button>\n    </div>\n}\n\nexport {TodoItem}","import {TodoItem} from './TodoItem'\nimport {ITodo} from '../types/data' \n\ninterface ITodoListProps{\n    items: ITodo[];\n    toggleTodo: (id: number) => void;\n    removeTodo: (id: number) => void;\n}\n\nconst TodoList: React.FC<ITodoListProps> = (props) => {\n    const { items, toggleTodo, removeTodo } = props;\n\n    return <div>\n        {\n            props.items.map(todo => (\n                <TodoItem \n                    key={todo.id} \n                    toggleTodo={toggleTodo}\n                    removeTodo={removeTodo} \n                    {...todo}\n                />\n            ))\n        }\n    </div>\n}\n\nexport { TodoList } ","import { useState, useEffect, useRef } from 'react'\nimport { TodoList } from './TodoList'\nimport {ITodo} from '../types/data'\n\nconst App: React.FC = () => {\n    const [value, setValue] = useState('');\n    const [todos, setTodos] = useState<ITodo[]>([]);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        setValue(e.target.value)\n    }\n\n    const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        if (e.key === 'Enter') addTodo();\n    }\n    const addTodo = () => {\n        if (value) {\n            setTodos([...todos, {\n                id: Date.now(),\n                title: value,\n                complete: false, \n            }])\n            setValue('')\n        }\n    }\n\n    const removeTodo = (id: number): void => {\n        setTodos(todos.filter(todo => todo.id !== id))\n    }\n\n    const toggleTodo = (id: number): void => {\n        setTodos(todos.map(todo => {\n            if(todo.id !== id) return todo;\n            return {\n                ...todo,\n                complete: !todo.complete\n            }\n        }))\n    }\n\n\n    useEffect(() => {\n        if (inputRef.current) inputRef.current.focus();\n    }, []);\n\n    return <div>\n        <div>\n            <input value = {value} onChange = {handleChange} onKeyDown={handleKeyDown} ref={inputRef}/>\n            <button onClick = {addTodo}>Add</button>\n        </div>\n        <TodoList items={todos} removeTodo={removeTodo} toggleTodo={toggleTodo}/>\n    </div>\n}\n\nexport {App};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}